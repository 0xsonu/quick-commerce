services:
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ecommerce_user -d ecommerce_db']
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    container_name: ecommerce-backend
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=ecommerce_db
      - DATABASE_USER=ecommerce_user
      - DATABASE_PASSWORD=ecommerce_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    command: npm run start:dev

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: ecommerce-frontend
    ports:
      - '5173:5173'
    environment:
      - VITE_API_URL=http://localhost:3000
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    command: npm run dev -- --host

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
